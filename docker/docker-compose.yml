version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pancakes_postgres
    environment:
      POSTGRES_DB: pancakes_analytics
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pancakes123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../database/seed_data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    ports:
      - "5432:5432"
    networks:
      - pancakes_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: pancakes_backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pancakes_analytics
      DB_USER: postgres
      DB_PASSWORD: pancakes123
      JWT_SECRET: pancakes_jwt_secret_production_key
      PORT: 5000
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - pancakes_network
    volumes:
      - ../backend:/app
      - /app/node_modules
    command: npm start

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: pancakes_frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - pancakes_network
    volumes:
      - ../frontend:/app
      - /app/node_modules
    command: npm start

volumes:
  postgres_data:

networks:
  pancakes_network:
    driver: bridge